-module(thor_channel).
-behaviour(gen_server).

%% API
-export([new/0, send_message/3, get_messages/1]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

%% Single message format
-record(message, {from,        %% Who sent the message
                  msg_txt,     %% The contents of the message
                  timestamp,   %% The timestamp of the message
                  seq_no }).   %% The sequence number of the message

-record(state, { received,      %% ordered list of recieved/delivered messages
                 pending        %% ordered list of messages penging delivery
                }).

new() ->
    {ok, Pid} = gen_server:start_link(?MODULE, [], []),
    Pid.

send_message(Channel, From, Message) ->
    gen_server:cast(Channel, {send_to, From, Message}).

get_messages(Channel) ->
    gen_server:call(Channel, {get_messages}).

init([]) ->
    io:format("created channel~n", []),
    {ok, #state{received = thor_json:new_json_obj(), pending = thor_json:new_json_obj() }}.

handle_call({ get_messages }, _From, State) ->
    Reply = get_messages(State#state.pending),
    Received = lists:append(State#state.received, State#state.pending), 
    {reply, Reply, State#state{received = Received, pending = []}};

handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

handle_cast({send_to, From, Message}, State) ->
    Pending = lists:append(State#state.pending, [{ {"From", From}, {"Message", Message} }]),
    io:format("Pending messages = ~p~n", [Pending]),
    {noreply, State#state{pending = Pending}};

handle_cast(_Request, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(Reason, State) ->
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%% INTERNAL API's

get_messages({struct, Messages}) ->
    Messages.

add_messages({struct, First}, {struct, Second}) -.
    {struct, lists:append(First, Second)}.

add_message({struct, Messages}, Message) ->
    {struct, lists:append(Messages, new_message(Message))}.

new_message_obj(Message = #message{from = From, msg_txt = Msg, timestamp = Ts, seq_no = SeqNo}) ->
    [
